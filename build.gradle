// (Gradle) Build script for the project.
buildscript {
    ext {
        iTextPdfVersion = '7.1.14'
        junitVersion = '4.13.1'
        log4jVersion = '2.14.0'
    }
}

defaultTasks 'dist'

apply plugin: 'java'

// Define project specific directories.
def workDir = "$projectDir/work"
def programDirName = 'program'
def programDir = "$workDir/$programDirName"
def testsDirName = 'tests'
def testsDir = "$workDir/$testsDirName"
def libraryDirName = 'library'
def distDir = "$buildDir/distributions"
def autoDocDir = "$distDir/autodoc"
def tempDirName = 'temp'
def minJavaVersion = 1.8
def minGradleVersion = 6.0

// Setup plugin specific variables.
sourceCompatibility = minJavaVersion
version = projectVersion
libsDirName = distDir

// External libraries loader.
repositories {
    jcenter()
}

dependencies {
    implementation "com.itextpdf:kernel:$iTextPdfVersion"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    testImplementation "junit:junit:$junitVersion"
}

// Setup the project source and compilation directories.
sourceSets {
    main {
        java {
            srcDir "source/main/java"
            outputDir = file(programDir)
        }
    }
    test {
        java {
            srcDir "source/test/java"
            outputDir = file(testsDir)
        }
    }
}

// Force IntelliJ IDEA development environment to use the same build directories as Gradle.
apply plugin: 'idea'
idea {
    module {
        //inheritOutputDirs = false
        outputDir file(programDir)
        testOutputDir file(testsDir)
        downloadJavadoc = true
        downloadSources = true
    }
}

compileJava {
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}

// Check the preconditions before attempting build.
build.dependsOn('checkEnv')

jar {
    archiveBaseName = projectName
    archiveClassifier = 'binary'
    manifest {
        attributes(
            'Specification-Title': projectName,
            'Specification-Version': projectVersion,
            'Implementation-Vendor': 'DAstarot',
            'Main-Class': 'dsk.anotex.ConsoleRunner'
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

task checkEnv {
    description = 'Check the build pre-conditions.'

    // Check the Java version.
    def javaVersion = (System.getProperty('java.version') =~ /^\d+\.\d+/)[0] as double
    if (javaVersion < minJavaVersion) {
        throw new GradleException("Inappropriate Java version ($javaVersion). " +
                "Needs ($minJavaVersion) or higher.")
    }

    // Check the Gradle version.
    def gradleVersion = (gradle.gradleVersion =~ /^\d+\.\d+/)[0] as double
    if (gradleVersion < minGradleVersion) {
        throw new GradleException("Inappropriate Gradle version ($gradleVersion). " +
                "Needs ($minGradleVersion) or higher.")
    }
}

javadoc {
    destinationDir = file(autoDocDir)
    options.addStringOption('Xdoclint:none', '-quiet')
}

task docs {
    description = 'Generates project documentation.'
    dependsOn javadoc
}

task dist(type: Zip, dependsOn: ['checkEnv', 'clean', 'build']) {
    description = 'Create project distribution.'

    // Ensure ordered execution of dependent tasks (this is workaround for Gradle design weakness).
    def tasks = [clean, jar, test, docs]
    for (int i = 0; i < tasks.size() - 1; i++) {
        tasks[i + 1].mustRunAfter(tasks[i])
    }
    dependsOn(tasks)

    archiveClassifier = 'dist'
    destinationDirectory = file(distDir)
    from (workDir) {
        exclude([tempDirName, testsDirName])
    }
    from (configurations.runtimeClasspath) {
        into libraryDirName
    }
    includeEmptyDirs = false
    into projectName
}


